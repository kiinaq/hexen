// Hexen grammar with unified declaration syntax
// Philosophy: One declaration pattern for all - name : type = value

program: function+

function: "func" IDENTIFIER "(" ")" ":" type "=" block

block: "{" statement* "}"

statement: var_declaration
         | return_stmt
         | block
         | assignment_stmt

var_declaration: val_declaration
               | mut_declaration

val_declaration: VAL IDENTIFIER ":" type "=" (expression | "undef")
               | VAL IDENTIFIER "=" expression

mut_declaration: MUT IDENTIFIER ":" type "=" (expression | "undef")
               | MUT IDENTIFIER "=" expression

return_stmt: "return" expression?

assignment_stmt: IDENTIFIER "=" expression

expression: logical_or (":" type)?

logical_or: logical_and (OR_OP logical_and)*
logical_and: equality (AND_OP equality)*
equality: relational (EQ_OP relational)*
relational: additive (REL_OP additive)*
additive: multiplicative (ADD_OP multiplicative)*
multiplicative: unary (MUL_OP unary)*
unary: (UNARY_OP)? primary
primary: NUMBER | STRING | BOOLEAN | IDENTIFIER | block | "(" expression ")"

OR_OP: "||"
AND_OP: "&&"
EQ_OP: "==" | "!="
REL_OP: "<" | ">" | "<=" | ">="
ADD_OP: "+" | "-"
MUL_OP: "*" | "/" | "\\" | "%"
UNARY_OP: "-" | "!"

type: TYPE_I32
    | TYPE_I64
    | TYPE_F32
    | TYPE_F64
    | TYPE_STRING
    | TYPE_BOOL
    | TYPE_VOID

TYPE_I32: "i32"
TYPE_I64: "i64"
TYPE_F32: "f32"
TYPE_F64: "f64"
TYPE_STRING: "string"
TYPE_BOOL: "bool"
TYPE_VOID: "void"

VAL: "val"
MUT: "mut"

// Terminals
IDENTIFIER: /(?!val\b|mut\b|true\b|false\b)[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /-?[0-9]+(\.[0-9]+)?/
STRING: /\"[^\"]*\"/
BOOLEAN: "true" | "false"

// Ignore whitespace and comments
%import common.WS
COMMENT: /\/\/[^\r\n]*/
%ignore WS
%ignore COMMENT 