// Hexen grammar with unified declaration syntax
// Philosophy: One declaration pattern for all - name : type = value

program: function+

function: "func" IDENTIFIER "(" ")" ":" type "=" block

block: "{" statement* "}"

statement: var_declaration
         | return_stmt

var_declaration: val_declaration
               | mut_declaration

val_declaration: "val" IDENTIFIER ":" type "=" (expression | "undef")
               | "val" IDENTIFIER "=" expression

mut_declaration: "mut" IDENTIFIER ":" type "=" (expression | "undef")
               | "mut" IDENTIFIER "=" expression

return_stmt: "return" expression

expression: NUMBER
          | STRING
          | IDENTIFIER
          | block

type: TYPE_I32
    | TYPE_I64
    | TYPE_F64
    | TYPE_STRING
    | TYPE_VOID

TYPE_I32: "i32"
TYPE_I64: "i64"
TYPE_F64: "f64"
TYPE_STRING: "string"
TYPE_VOID: "void"

// Terminals
IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /[0-9]+/
STRING: /\"[^\"]*\"/

// Ignore whitespace and comments
%import common.WS
%ignore WS 