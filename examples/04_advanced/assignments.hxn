// Assignments - Advanced Assignment Patterns
// Demonstrates Hexen's assignment system and common patterns

func basic_assignments() : i32 = {
    // Basic assignment to mutable variables
    mut counter = 0
    counter = 10        // Simple reassignment
    counter = 20        // Multiple assignments allowed
    counter = 30        // Each assignment updates the value
    
    return counter
}

func type_safe_assignments() : void = {
    // Assignment works with different types
    mut number = 42
    number = 100        // i32 to i32 ✓
    
    mut message = "hello"
    message = "world"   // string to string ✓
    
    mut flag = true
    flag = false        // bool to bool ✓
    
    // Type mismatches are caught at compile time:
    // number = "text"   // ❌ Error: i32 vs string
    // message = 42      // ❌ Error: string vs i32
    // flag = 42         // ❌ Error: bool vs i32
    
    return
}

func assignments_with_explicit_types() : void = {
    // Assignment with explicit type annotations
    mut typed_number : i32 = 42
    typed_number = 100  // Type must match
    
    mut typed_text : string = "start"
    typed_text = "finish"
    
    mut typed_flag : bool = true
    typed_flag = false
    
    return
}

func assignments_in_blocks() : i32 = {
    mut outer_var = 10
    
    // Assignment works in statement blocks
    {
        mut scoped = 100
        scoped = 200    // Local assignment
        
        // Can assign to outer scope variables
        outer_var = 999
    }
    
    return outer_var  // Returns 999
}

func uninitialized_assignments() : i32 = {
    // Assignment to uninitialized variables
    mut uninitialized : i32 = undef
    uninitialized = 42  // Now it has a value
    
    mut pending : string = undef
    pending = "ready"   // String assignment
    
    mut status : bool = undef
    status = true       // Boolean assignment
    
    return uninitialized  // Safe to use after assignment
}

func assignment_patterns() : i32 = {
    // Common assignment patterns
    val initial = 42    // val variables cannot be reassigned
    mut step1 = 0       // But mut variables can be
    mut step2 = 0
    mut final = 0
    
    // Sequential assignments (data flow)
    step1 = initial     // Copy from immutable to mutable
    step2 = step1       // Chain assignments
    final = step2       // Final result
    
    // Self-assignment is allowed (though usually redundant)
    mut value = 42
    value = value       // Perfectly valid
    
    return final
}

func immutable_vs_mutable() : i32 = {
    // Immutable variables cannot be reassigned
    val constant = 42
    // constant = 100   // ❌ Error: Cannot assign to val variable
    
    // Mutable variables can be reassigned
    mut variable = 42
    variable = 100      // ✓ OK
    
    return variable
} 