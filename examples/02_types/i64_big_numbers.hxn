// i64 Number Support with Zig-style Comptime Types
// Demonstrates handling of 64-bit integers with elegant coercion

func demonstrate_i32_range() : i32 = {
    // i32 range: -2,147,483,648 to 2,147,483,647
    val max_i32 = 2147483647      // comptime_int -> i32 (fits perfectly)
    val typical = 42              // comptime_int -> i32 (default)
    
    return max_i32
}

func demonstrate_i64_numbers() : i64 = {
    // i64 range up to 9,223,372,036,854,775,807
    val beyond_i32 : i64 = 2147483648           // Beyond i32 max, needs i64
    val million : i64 = 1000000                 // 1 million
    val billion : i64 = 1000000000              // 1 billion  
    val trillion : i64 = 1000000000000          // 1 trillion
    val max_i64 : i64 = 9223372036854775807     // Maximum i64 value
    
    // All use comptime_int -> i64 coercion elegantly!
    return beyond_i32
}

func demonstrate_seamless_coercion() : i64 = {
    // The beauty: same literal, different contexts
    val small : i32 = 42          // comptime_int -> i32
    val large : i64 = 42          // comptime_int -> i64 (same literal!)
    val as_float : f64 = 42       // comptime_int -> f64 (same literal!)
    
    // Standard i64 use cases
    val timestamp : i64 = 1703980800000  // Unix timestamp in milliseconds
    val file_size : i64 = 5368709120     // 5GB in bytes
    
    return timestamp
}

func demonstrate_practical_context() : void = {
    // In real applications, you might have:
    val user_id : i64 = 1234567890123456        // User ID
    val byte_count : i64 = 1099511627776        // 1TB in bytes
    val nanoseconds : i64 = 1703980800123456789 // High-precision timestamp
    
    // All work seamlessly with comptime_int coercion
}

func demonstrate_mixed_arithmetic() : i64 = {
    // Mixing i32 and i64 with type widening
    val small : i32 = 1000
    val standard : i64 = 1000000000000   // 1 trillion
    val result : i64 = small             // i32 -> i64 widening
    
    // You can build up values
    val multiplier : i64 = 1000000
    val base : i32 = 12345
    val scaled : i64 = base              // i32 -> i64, then conceptually * multiplier
    
    return result
}

func demonstrate_real_world_use_cases() : i64 = {
    // Real-world scenarios where i64 is essential
    val memory_address : i64 = 140737488355328   // Memory address
    val database_id : i64 = 18446744073709551    // Database ID  
    val financial_amount : i64 = 999999999999    // Financial calculations in cents
    val blockchain_height : i64 = 850000         // Bitcoin block height
    
    return financial_amount
}

func main() : i32 = {
    // Key benefits of the new system:
    // 1. No literal suffixes needed (no 42L or 42i64)
    // 2. Context determines type automatically
    // 3. Same literal works for different target types
    // 4. i64 numbers are handled seamlessly
    // 5. Type safety is maintained
    
    val regular_i64 : i64 = 9223372036854775807
    
    return 0  // comptime_int -> i32 (return type)
} 