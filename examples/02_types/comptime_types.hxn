// Comptime Type System Demonstration
// Shows elegant type coercion without literal suffixes

func demonstrate_comptime_types() : void = {
    // Integer literals are comptime_int - context determines final type
    val default_int = 42        // comptime_int -> i32 (default)
    val explicit_i64 : i64 = 42 // comptime_int -> i64 (coerced)
    val as_float : f32 = 42     // comptime_int -> f32 (coerced)
    val as_double : f64 = 42    // comptime_int -> f64 (coerced)
    
    // Float literals are comptime_float - context determines precision
    val default_float = 3.14    // comptime_float -> f64 (default)
    val single_prec : f32 = 3.14 // comptime_float -> f32 (coerced)
    
    // No literal suffixes needed! Context is king
    val pi_f32 : f32 = 3.14159  // Elegant - no 3.14159f32 needed
    val pi_f64 : f64 = 3.14159  // Same literal, different target type
}

func demonstrate_type_safety() : void = {
    // Type safety is maintained - unsafe coercions are rejected
    
    // These would fail compilation:
    // val unsafe_bool : bool = 42      // comptime_int cannot coerce to bool
    // val unsafe_string : string = 3.14 // comptime_float cannot coerce to string
    // val precision_loss : i32 = 3.14   // comptime_float cannot coerce to int
}

func demonstrate_function_returns() : f32 = {
    // Return type coercion works seamlessly
    return 42  // comptime_int -> f32 (function return type)
}

func demonstrate_mixed_operations() : f64 = {
    // All numeric types work together elegantly
    val small_int : i32 = 10
    val large_int : i64 = 20
    val single_float : f32 = 3.14
    val double_float : f64 = 2.718
    
    // Regular type widening still works
    val widened : i64 = small_int  // i32 -> i64
    val converted : f64 = single_float  // f32 -> f64
    
    // Comptime types adapt to context
    val flexible = 42  // comptime_int -> i32 (default)
    
    return 1.0  // comptime_float -> f64 (function return type)
}

func demonstrate_assignments() : void = {
    // Mutable variables support comptime coercion in assignments
    mut flexible_int : i64 = 0
    mut flexible_float : f32 = 0.0
    
    flexible_int = 42      // comptime_int -> i64
    flexible_float = 3.14  // comptime_float -> f32
    flexible_float = 7     // comptime_int -> f32 (integers can become floats)
}

func main() : i32 = {
    // The beauty of comptime types:
    // - No literal suffixes cluttering code
    // - Context-dependent coercion
    // - Type safety maintained
    // - Elegant and readable
    
    return 0  // comptime_int -> i32 (return type)
} 