// All Types - Hexen's Complete Type System
// Demonstrates every built-in type with inference and explicit annotations

func type_inference() : i32 = {
    // Type inference with comptime types - compiler determines types automatically
    val integer = 42           // comptime_int -> i32 (default)
    val big_int = 100         // comptime_int -> i32 (default)
    val decimal = 3.14        // comptime_float -> f64 (default)
    val text = "Hello!"       // string (no coercion needed)
    val flag = true           // bool (no coercion needed)
    
    return integer
}

func explicit_types() : i32 = {
    // Explicit type annotations with elegant comptime coercion
    val small_int : i32 = 42          // comptime_int -> i32
    val large_int : i64 = 100         // comptime_int -> i64 (coerced!)
    val single_prec : f32 = 3.14      // comptime_float -> f32 (coerced!)
    val double_prec : f64 = 2.718     // comptime_float -> f64
    val message : string = "Explicit types"
    val ready : bool = true
    
    return small_int
}

func uninitialized_variables() : i32 = {
    // Variables with undef (must have explicit type)
    val pending : i32 = undef      // Will be set later
    val config : string = undef    // Uninitialized string
    val ready : bool = undef       // Uninitialized boolean
    
    // Note: Cannot use uninitialized variables until assigned
    val result = 42
    return result
}

func mixed_usage() : bool = {
    // Real-world usage mixing inference and explicit types
    val count = 10              // Inferred i32
    val total : i32 = 1000000   // Explicit for large numbers
    val ratio = 75              // Inferred i32 (floats not implemented yet)  
    val name = "Hexen"          // Inferred string
    val success = true          // Inferred bool
    
    return success
}

func mixed_coercions() : f32 = {
    // Showcase the power of comptime types
    val int_as_f32 : f32 = 42         // comptime_int -> f32 (elegant!)
    val int_as_f64 : f64 = 100        // comptime_int -> f64 (elegant!)
    val float_as_f32 : f32 = 3.14     // comptime_float -> f32
    val same_literal_diff_types_1 : f32 = 2.5  // comptime_float -> f32
    val same_literal_diff_types_2 : f64 = 2.5  // comptime_float -> f64
    
    // No literal suffixes needed - context determines everything!
    return int_as_f32
}

func regular_type_widening() : f64 = {
    // Regular type widening still works for concrete types
    val start : i32 = 42
    val widened : i64 = start         // i32 -> i64 widening
    val as_float : f64 = widened      // i64 -> f64 conversion
    
    val precise : f32 = 3.14
    val more_precise : f64 = precise  // f32 -> f64 widening
    
    return as_float
}

func demonstrate_all_types() : void = {
    // All 6 concrete types in Hexen
    val int32 : i32 = 42
    val int64 : i64 = 42              // Same literal, different type!
    val float32 : f32 = 3.14          // Same literal, different precision!
    val float64 : f64 = 3.14          // Same literal, different precision!
    val text : string = "Hexen"
    val boolean : bool = true
    
    // Plus the special void type for functions
    // (void cannot be used as variable type)
}

func main() : i32 = {
    // The beauty of Zig-style comptime types:
    // - Write 42, get the type you need
    // - Write 3.14, get the precision you want  
    // - No suffixes cluttering your code
    // - Type safety maintained
    
    return 0  // comptime_int -> i32 (return type)
} 