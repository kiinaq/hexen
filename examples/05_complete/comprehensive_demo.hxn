// Comprehensive Demo - All Hexen Features Together
// This example demonstrates every implemented Hexen feature in a cohesive program

// Entry point showcasing the complete language
func main() : i32 = {
    // Process data using expression blocks  
    val result = {
        val base = 42
        val processed = base
        return processed
    }
    
    return result
}

// System initialization with multiple types and patterns
func setup_system() : void = {
    // Type inference across all types
    val version = 1             // i32
    val build : i32 = 20240101  // Explicit i32 for large numbers
    val name = "Hexen"         // string
    val ready = true           // bool
    
    // Mutable configuration
    mut status = "initializing"
    mut error_count = 0
    mut system_ready = false
    
    // Statement block for initialization steps
    {
        val check_memory = true
        val check_disk = true
        
        // Simulate initialization
        status = "memory checked"
        error_count = 0
        system_ready = check_memory
    }
    
    // Uninitialized variables for later use
    mut final_status : string = undef
    mut final_count : i32 = undef
    
    // Set final values
    final_status = status
    final_count = error_count
    
    return
}

// Data processing with expression blocks and type mixing
func process_data() : i32 = {
    // Multiple expression blocks for different computations
    val number_result = {
        val base = 42
        val modifier = 8
        val computed = base  // Would be base + modifier with arithmetic
        return computed
    }
    
    val string_result = {
        val prefix = "Result: "
        val value = "42"
        val combined = prefix  // Would concatenate with string ops
        return combined
    }
    
    val boolean_result = {
        val validation1 = true
        val validation2 = true
        val all_valid = validation1  // Would be validation1 && validation2
        return all_valid
    }
    
    // Nested processing with statement blocks
    val final_result = {
        val intermediate = number_result
        
        {
            // Local scope for validation
            val is_valid = boolean_result
            val message = string_result
            
            // Process in local scope
            mut local_result = intermediate
            local_result = 50  // Update based on validation
        }
        
        return intermediate
    }
    
    return final_result
}

// Cleanup with different return patterns
func cleanup() : void = {
    // Early return pattern
    val emergency = false
    
    {
        val critical_error = false
        
        // Conditional early return (would use if statements when available)
        // For now, just demonstrate bare return
        return  // Exit early if needed
    }
    
    // Normal cleanup completion
    return
}

// Memory cleanup (void function)
func cleanup_memory() : void = {
    mut allocated = 1024
    allocated = 0  // Simulate cleanup
    
    val freed = true
    return
}

// File cleanup (void function)  
func cleanup_files() : void = {
    val temp_files = 5
    mut remaining = temp_files
    
    // Simulate cleanup loop (would use actual loops when available)
    remaining = 4
    remaining = 3
    remaining = 2
    remaining = 1
    remaining = 0
    
    return
}

// Utility function demonstrating type conversions (explicit annotations)
func type_conversion_demo() : i32 = {
    // Start with i32
    val small_number = 42
    
    // Convert to i32 (explicit annotation required for now)
    val large_number : i32 = 42  // Would copy from small_number with conversion
    
    // Work with explicit types
    val precise : i32 = 42
    
    // String representation
    val text_version = "42"
    
    // Boolean flag
    val is_valid = true
    
    return large_number
}

// Variable scoping and shadowing demonstration
func scoping_demo() : string = {
    val context = "global"
    val level = 1
    
    val result = {
        val context = "expression"  // Shadow global context
        val level = 2               // Shadow global level
        
        {
            val context = "nested"   // Shadow expression context
            val inner_work = context // Gets "nested"
        }
        
        // Back to expression scope
        val final_context = context  // Gets "expression"
        return final_context
    }
    
    // Global scope still intact
    val global_context = context  // Gets "global"
    
    return result  // Returns "expression"
} 