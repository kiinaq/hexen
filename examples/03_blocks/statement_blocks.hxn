// Statement Blocks - Blocks for Scoped Execution
// Demonstrates Hexen's statement blocks for organizing code and scoping

func statement_block_basics() : i32 = {
    val outer = 42
    
    // Statement block - executes statements in a scope
    {
        val inner = 100
        mut temp = outer  // Can access outer scope
        temp = inner      // Local operations
        // Variables here don't leak to outer scope
    }
    
    // inner is not accessible here
    return outer
}

func scoping_demonstration() : i32 = {
    val count = 10
    
    // Multiple statement blocks
    {
        val local_count = 20
        mut working = count  // Access outer variable
        working = local_count
    }
    
    {
        // Different scope, can reuse names
        val local_count = 30
        val result = count  // Still access outer
    }
    
    return count  // Original value unchanged
}

func variable_shadowing() : i32 = {
    val name = "outer"
    val value = 100
    
    {
        val name = "inner"  // Shadows outer name
        val inner_value = 200
        
        // name here refers to inner name ("inner")
        // value still refers to outer value (100)
        mut local = value  // Gets 100
        local = inner_value  // Now 200
    }
    
    // name here refers to outer name ("outer") 
    return value  // Still 100
}

func statement_blocks_with_returns() : i32 = {
    val base = 42
    
    {
        val check = true
        // Statement blocks can contain returns from the function
        return base  // This returns from the function, not the block
    }
    
    // This line is never reached
    return 0
}

func nested_statement_blocks() : void = {
    val level = 1
    
    {
        val level = 2  // Shadow outer level
        
        {
            val level = 3  // Shadow middle level
            val deep = level  // Gets 3
        }
        
        val middle = level  // Gets 2
    }
    
    val outer_ref = level  // Gets 1
    return
} 