// Basic array syntax examples for Hexen language
// Demonstrates array types, literals, and element access

func basic_array_examples() : void = {
    // Fixed-size array type declarations with literals
    val numbers : [5]i32 = [1, 2, 3, 4, 5]
    val floats : [3]f64 = [3.14, 2.71, 1.41]
    val flags : [4]bool = [true, false, true, false]
    val words : [2]string = ["hello", "world"]
    
    // Inferred-size arrays - size determined from literal
    val auto_nums : [_]i32 = [10, 20, 30, 40, 50, 60]
    val auto_words : [_]string = ["apple", "banana", "cherry"]
    
    // Empty array literals
    val empty_ints : [0]i32 = []
    val empty_strings : [0]string = []
    
    // Array element access
    val first_number = numbers[0]      // Access first element
    val last_float = floats[2]         // Access last element  
    val middle_flag = flags[1]         // Access middle element
    
    // Array access with expressions as indices
    val index = 2
    val dynamic_access = numbers[index]
    val computed_access = words[1 + 0]
    
    return
}

func array_with_expressions() : void = {
    // Arrays containing expressions (not just literals)
    val x = 10
    val y = 20
    val computed : [3]i32 = [x + y, x * 2, y / 2]
    
    // Mixed comptime and runtime values
    val mixed : [4]i32 = [42, x, 100, y]
    
    return
}

func array_function_parameters(data: [_]i32, matrix: [3][4]f64) : i32 = {
    // Function taking arrays as parameters
    val first_elem = data[0]
    val matrix_elem = matrix[1][2]
    return first_elem
}

func array_function_return() : [3]i32 = {
    // Function returning an array
    return [100, 200, 300]
}

func array_in_function_calls() : void = {
    // Using arrays in function calls
    val sample_data : [_]i32 = [1, 2, 3, 4, 5]
    val sample_matrix : [3][4]f64 = [
        [1.0, 2.0, 3.0, 4.0],
        [5.0, 6.0, 7.0, 8.0], 
        [9.0, 10.0, 11.0, 12.0]
    ]
    
    val result = array_function_parameters(sample_data, sample_matrix)
    val returned_array = array_function_return()
    
    return
}

func main() : void = {
    basic_array_examples()
    array_with_expressions() 
    array_in_function_calls()
    return
}